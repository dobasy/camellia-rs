use crate::*;

macro_rules! define_tests {
    (
            $enc: ident,
            $dec: ident,
            $key: expr,
            $result: expr
        ) => {
        #[test]
        fn $enc() {
            let key = $key;
            let mut data = Block::from([
                0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
                0x32, 0x10,
            ]);
            let c = CamelliaCipher::new(&key).unwrap();
            c.encrypt(&mut data);
            assert_eq!(data, Block::from($result));
        }

        #[test]
        fn $dec() {
            let key = $key;
            let mut data = Block::from($result);
            let c = CamelliaCipher::new(&key).unwrap();
            c.decrypt(&mut data);
            assert_eq!(
                data,
                Block::from([
                    0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76,
                    0x54, 0x32, 0x10,
                ])
            );
        }
    };
}

define_tests!(
    enc128,
    dec128,
    [
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32,
        0x10,
    ],
    [
        0x67, 0x67, 0x31, 0x38, 0x54, 0x96, 0x69, 0x73, 0x08, 0x57, 0x06, 0x56, 0x48, 0xea, 0xbe,
        0x43
    ]
);
define_tests!(
    enc192,
    dec192,
    [
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32,
        0x10, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
    ],
    [
        0xb4, 0x99, 0x34, 0x01, 0xb3, 0xe9, 0x96, 0xf8, 0x4e, 0xe5, 0xce, 0xe7, 0xd7, 0x9b, 0x09,
        0xb9
    ]
);
define_tests!(
    enc256,
    dec256,
    [
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32,
        0x10, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd,
        0xee, 0xff,
    ],
    [
        0x9a, 0xcc, 0x23, 0x7d, 0xff, 0x16, 0xd7, 0x6c, 0x20, 0xef, 0x7c, 0x91, 0x9e, 0x3a, 0x75,
        0x09
    ]
);
